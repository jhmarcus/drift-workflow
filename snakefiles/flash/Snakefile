#!python
import glob
import os
from snakemake.utils import R


# setup the output files 
dataset_paths = glob.glob("data/datasets/*")
rds_greedy = []
rds_backfit = []
for dataset_path in dataset_paths:
    dataset = os.path.basename(dataset_path)
    bed_lst = glob.glob("{}/*.bed".format(dataset_path))
    if len(bed_lst) > 0:

        bed_path = bed_lst[0]
        prefix = os.path.basename(bed_path).split(".")[0]
        rds_greedy.append("output/flash_greedy/{}/{}.rds".format(dataset, prefix))
        rds_backfit.append("output/flash_backfit/{}/{}.rds".format(dataset, prefix))



rule flash_all:
    """Runs all the flash rules
    """
    input:
        rds_greedy,
        rds_backfit


rule run_flash_greedy:
    """Runs greedy non-negative flash 
    """
    input:
        bed = "data/datasets/{dataset}/{prefix}.bed"
    params:
        bed = "data/datasets/{dataset}/{prefix}"
    output:
        rds = "output/flash_greedy/{dataset}/{prefix}.rds"
    benchmark:
        "output/benchmark/flash_greedy/{dataset}/{prefix}.txt"
    run:
        R("""
          # read the genotype matrix
          Y = t(lfa:::read.bed('{params.bed}'))

          # number of individuals
          n = nrow(Y)
          
          # run greedy flash
          flash_fit = flashier::flashier(Y,
                                         greedy.Kmax=30,
                                         ash.param=list(method='fdr'),
                                         prior.type=c('nonnegative', 'normal.mixture'),
                                         var.type=2,
                                         fixed.factors=flashier::ones.factor(1),
                                         output.lvl=4,
                                         verbose.lvl=2)

          # save the rds
          saveRDS(flash_fit, '{output.rds}')
          """)


rule run_flash_backfit:
    """Runs non-negative flash using backfitting with a greedy flash fit
    as intialization
    """
    input:
        bed = "data/datasets/{dataset}/{prefix}.bed",
        rds = "output/flash_greedy/{dataset}/{prefix}.rds"
    params:
        bed = "data/datasets/{dataset}/{prefix}"
    output:
        rds = "output/flash_backfit/{dataset}/{prefix}.rds"
    benchmark:
        "output/benchmark/flash_backfit/{dataset}/{prefix}.txt"
    run:
        R("""
          Y = t(lfa:::read.bed('{params.bed}'))

          # read greedy flash fit
          greedy_flash_fit = readRDS('{input.rds}')

          # number of individuals
          n = nrow(Y)

          # run greedy flash
          flash_fit = flashier::flashier(Y,
                                         flash.init=greedy_flash_fit,
                                         backfit = 'only',
                                         backfit.order = 'dropout',
                                         backfit.reltol = 10,
                                         ash.param=list(method='fdr'),
                                         prior.type=c('nonnegative', 'point.normal'),
                                         var.type=2,
                                         fixed.factors=flashier::ones.factor(1),
                                         output.lvl=4,
                                         verbose.lvl=2)

          # save the rds
          saveRDS(flash_fit, '{output.rds}')
          """)
