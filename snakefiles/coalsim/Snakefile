#!python
import glob
import os
import numpy as np
import pandas as pd
import math
import msprime

ooa_sim_plink = ["data/datasets/ooa_sim/ooa_sim_maf.bed",
                 "data/datasets/ooa_sim/ooa_sim_maf.bim", 
                 "data/datasets/ooa_sim/ooa_sim_maf.fam"]

tree_sim_plink = ["data/datasets/tree_sim/tree_sim_maf.bed",
                  "data/datasets/tree_sim/tree_sim_maf.bim", 
                  "data/datasets/tree_sim/tree_sim_maf.fam"]

tree_longbranch_sim_plink = ["data/datasets/tree_longbranch_sim/tree_longbranch_sim_maf.bed",
                             "data/datasets/tree_longbranch_sim/tree_longbranch_sim_maf.bim", 
                             "data/datasets/tree_longbranch_sim/tree_longbranch_sim_maf.fam"]

migration_sim_plink = ["data/datasets/migration_sim/migration_sim_maf.bed",
                       "data/datasets/migration_sim/migration_sim_maf.bim", 
                       "data/datasets/migration_sim/migration_sim_maf.fam"]

rule coalsim_all:
    """Runs all coalescent simulations
    """
    input:
#        ooa_sim_plink,
#        tree_sim_plink,
#        tree_longbranch_sim_plink,
        migration_sim_plink


rule run_ooa_sim:
    """Runs out of africa simulation
    """
    input:
    params:
        path = "data/datasets/ooa_sim",
        vcf = "data/datasets/ooa_sim/ooa_sim.vcf",
        vcfgz = "data/datasets/ooa_sim/ooa_sim.vcf.gz",
        prune = "data/datasets/ooa_sim/ooa_sim_maf.prune.in",
        bed_prefix_0 = "data/datasets/ooa_sim/ooa_sim_maf",
        bed_prefix_1 = "data/datasets/ooa_sim/ooa_sim_maf_ldprune",
        n_afr=100,
        n_eur=100,
        n_eas=100,
        mu = 1.2e-8,
        r = 1e-8,
        seqlen = 1e8
    output:
        bed = "data/datasets/ooa_sim/ooa_sim_maf_ldprune.bed",
        bim = "data/datasets/ooa_sim/ooa_sim_maf_ldprune.bim",
        fam = "data/datasets/ooa_sim/ooa_sim_maf_ldprune.fam"
    run:
        # modified from https://msprime.readthedocs.io/en/stable/tutorial.html + Arjuns script

        # First we set out the maximum likelihood values of the various parameters
        # given in Table 1.
        N_A = 7300
        N_B = 2100
        N_AF = 12300
        N_EU0 = 1000
        N_AS0 = 510

        # Times are provided in years, so we convert into generations.
        generation_time = 25
        T_AF = 220e3 / generation_time
        T_B = 140e3 / generation_time
        T_EU_AS = 21.2e3 / generation_time
        
        # We need to work out the starting (diploid) population sizes based on
        # the growth rates provided for these two populations
        r_EU = 0.004
        r_AS = 0.0055
        N_EU = N_EU0 / math.exp(-r_EU * T_EU_AS)
        N_AS = N_AS0 / math.exp(-r_AS * T_EU_AS)
        
        # Migration rates during the various epochs.
        m_AF_B = 25e-5
        m_AF_EU = 3e-5
        m_AF_AS = 1.9e-5
        m_EU_AS = 9.6e-5

        # Population IDs correspond to their indexes in the population
        # configuration array. Therefore, we have 0=YRI, 1=CEU and 2=CHB
        # initially.
        population_configurations = [
            msprime.PopulationConfiguration(
                sample_size=params.n_afr, initial_size=N_AF),
            msprime.PopulationConfiguration(
                sample_size=params.n_eur, initial_size=N_EU, growth_rate=r_EU),
            msprime.PopulationConfiguration(
                sample_size=params.n_eas, initial_size=N_AS, growth_rate=r_AS)
        ]

        migration_matrix = [
            [0, m_AF_EU, m_AF_AS],
            [m_AF_EU, 0, m_EU_AS],
            [m_AF_AS, m_EU_AS, 0],
        ]

        demographic_events = [
            # CEU and CHB merge into B with rate changes at T_EU_AS
            msprime.MassMigration(
                time=T_EU_AS, source=2, destination=1, proportion=1.0),
            msprime.MigrationRateChange(time=T_EU_AS, rate=0),
            msprime.MigrationRateChange(
                time=T_EU_AS, rate=m_AF_B, matrix_index=(0, 1)),
            msprime.MigrationRateChange(
                time=T_EU_AS, rate=m_AF_B, matrix_index=(1, 0)),
            msprime.PopulationParametersChange(
                time=T_EU_AS, initial_size=N_B, growth_rate=0, population_id=1),
            # Population B merges into YRI at T_B
            msprime.MassMigration(
                time=T_B, source=1, destination=0, proportion=1.0),
            # Size changes to N_A at T_AF
            msprime.PopulationParametersChange(
                time=T_AF, initial_size=N_A, population_id=0)
        ]

        # tree seq
        ts = msprime.simulate(length=params.seqlen, recombination_rate=params.r, mutation_rate=params.mu,
                              population_configurations=population_configurations,
                              migration_matrix=migration_matrix,
                              demographic_events=demographic_events)

        # write to vcf
        with open(params.vcf, "w") as vcf_out:
	        ts.write_vcf(vcf_out, 2)
        
        # compress vcf
        shell("bgzip {params.vcf}")

        # filter on maf
        shell("plink --vcf {params.vcfgz} --double-id --maf .05 --out {params.bed_prefix_0} --make-bed")

        # ld prune snps
        shell("plink --bfile {params.bed_prefix_0} --indep-pairwise 200 25 0.4 --out {params.bed_prefix_0}")
        shell("plink --bfile {params.bed_prefix_0} --extract {params.prune} --make-bed --out {params.bed_prefix_1}")

        # remove intermediate files
        shell("rm {params.vcfgz}")
        shell("rm {params.bed_prefix_0}.*")
        shell("rm {params.path}/*.log {params.path}/*.nosex")


rule run_ms_sim:
    """Runs ms coalescent simulation commandline using scrm
    and outputs filtered plink files which can be used for downstream
    matrix decomp
    """
    input:
    params:
        scenario = "{scenario}",
        path = "data/datasets/{scenario}_sim",
        vcfgz = "data/datasets/{scenario}_sim/{scenario}_sim.vcf.gz",
        bed_prefix = "data/datasets/{scenario}_sim/{scenario}_sim_maf",
    output:
        bed = "data/datasets/{scenario}_sim/{scenario}_sim_maf.bed",
        bim = "data/datasets/{scenario}_sim/{scenario}_sim_maf.bim",
        fam = "data/datasets/{scenario}_sim/{scenario}_sim_maf.fam"
    run:
        # Modified from Pickrell et al. 2012
        if params.scenario == "tree":
            shell("scrm 400 400 -t 200 -r 200 500000 " \ 
                  "-I 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 " \
                  "-en 0.135 20 0.025 -ej 0.1375 20 19 -en 0.2725 19 0.025 " \ 
                  "-ej 0.275 19 18 -en 0.41 18 0.025 -ej 0.4125 18 17 -en 0.5475 17 0.025 " \
                  "-ej 0.55 17 16 -en 0.685 16 0.025 -ej 0.6875 16 15 -en 0.8225 15 0.025 " \
                  "-ej 0.825 15 14 -en 0.96 14 0.025 -ej 0.9625 14 13 -en 1.0975 13 0.025 " \
                  "-ej 1.1 13 12 -en 1.235 12 0.025 -ej 1.2375 12 11 -en 1.3725 11 0.025 " \
                  "-ej 1.375 11 10 -en 1.51 10 0.025 -ej 1.5125 10 9 -en 1.6475 9 0.025 " \
                  "-ej 1.65 9 8 -en 1.785 8 0.025 -ej 1.7875 8 7 -en 1.9225 7 0.025 " \
                  "-ej 1.925 7 6 -en 2.06 6 0.025 -ej 2.0625 6 5 -en 2.1975 5 0.025 " \
                  "-ej 2.2 5 4 -en 2.335 4 0.025 -ej 2.3375 4 3 -en 2.4725 3 0.025 " \
                  "-ej 2.475 3 2 -en 2.61 2 0.025 -ej 2.6125 2 1 " \ 
                  "--transpose-segsites --SC abs -p 14 | " \ 
                  "python code/scrm2vcf.py | bgzip -c > {params.vcfgz}"
                 )
        elif params.scenario == "tree_longbranch":
            shell("scrm 400 400 -t 200 -r 200 500000 -I 20 20 20 20 20 20 20 20 20 20 " \
                  "20 20 20 20 20 20 20 20 20 20 20 -en 0.135 20 0.025 -ej 0.1375 " \
                  "20 19 -en 0.2725 19 0.025 -ej 0.275 19 18 -en 0.41 18 0.025 -ej " \
                  "0.4125 18 17 -en 0.5475 17 0.025 -ej 0.55 17 16 -en 0.685 16 " \
                  "0.025 -ej 0.6875 16 15 -en 0.8225 15 0.025 -ej 0.825 15 14 -en " \
                  "0.96 14 0.025 -ej 0.9625 14 13 -en 1.0975 13 0.025 -ej 1.1 13 12 " \
                  "-en 1.235 12 0.025 -ej 1.2375 12 11 -en 1.3725 11 0.025 -ej " \
                  "1.375 11 10 -en 1.51 10 0.025 -ej 1.5125 10 9 -en 1.6475 9 0.025 " \
                  "-ej 1.65 9 8 -en 1.785 8 0.025 -ej 1.7875 8 7 -en 1.9225 7 0.025 " \
                  "-ej 1.925 7 6 -en 2.06 6 0.025 -ej 2.0625 6 5 -en 2.1975 5 0.025 " \
                  "-ej 2.2 5 4 -en 2.335 4 0.025 -ej 2.3375 4 3 -en 2.4725 3 0.025 " \
                  "-ej 2.475 3 2 -en 2.61 2 0.025 -ej 2.6125 2 1 " \ 
                  "--transpose-segsites --SC abs -p 14 | " \ 
                  "python code/scrm2vcf.py | bgzip -c > {params.vcfgz}"
                 )
        elif params.scenario == "migration":
            shell("scrm 400 400 -t 200 -r 200 500000 -I 20 20 20 20 20 20 20 20 20 20 " \
                  "20 20 20 20 20 20 20 20 20 20 20 -em 0.002675 10 1 4000 -en " \
                  "0.00270 20 0.025 -em 0.00270 10 1 0 -ej 0.00275 20 19 -en " \
                  "0.00545 19 0.025 -ej 0.00550 19 18 -en 0.00820 18 0.025 -ej " \
                  "0.00825 18 17 -en 0.01095 17 0.025 -ej 0.011 17 16 -en 0.01370 " \
                  "16 0.025 -ej 0.01375 16 15 -en 0.01645 15 0.025 -ej 0.01650 15 " \
                  "14 -en 0.01920 14 0.025 -ej 0.01925 14 13 -en 0.02195 13 0.025 " \
                  "-ej 0.02200 13 12 -en 0.02470 12 0.025 -ej 0.02475 12 11 -en " \
                  "0.02745 11 0.025 -ej 0.02750 11 10 -en 0.03020 10 0.025 -ej " \
                  "0.03025 10 9 -en 0.03295 9 0.025 -ej 0.03300 9 8 -en 0.03570 8 " \
                  "0.025 -ej 0.03575 8 7 -en 0.03845 7 0.025 -ej 0.03850 7 6 -en " \
                  "0.04120 6 0.025 -ej 0.04125 6 5 -en 0.04395 5 0.025 -ej 0.04400 " \
                  "5 4 -en 0.04670 4 0.025 -ej 0.04675 4 3 -en 0.04945 3 0.025 -ej " \
                  "0.04950 3 2 -en 0.05220 2 0.025 -ej 0.05225 2 1 " \
                  "--transpose-segsites --SC abs -p 14 | " \ 
                  "python code/scrm2vcf.py | bgzip -c > {params.vcfgz}"
                 )

        # filter on maf
        shell("plink --vcf {params.vcfgz} --double-id --maf .05 --out {params.bed_prefix} --make-bed")

        # remove intermediate files
        shell("rm {params.vcfgz}")
        shell("rm {params.path}/*.log {params.path}/*.nosex")
