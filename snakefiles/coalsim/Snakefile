#!python
import glob
import os
import numpy as np
import pandas as pd
import stdpopsim

# GLOBAL variables 
MODELS = ["OutOfAfrica_3G09"]
LENGTH_MULTIPLIER = .2
N_SAMPLES = 200
N_REP = 2

# output files/foldrs to be created
fams = [] 
bims = []
beds = []
for model in MODELS:
  for i in range(N_REP):
    fams.append("output/simulations/{}/rep{}_maf_ldprune.fam".format(model, i))
    bims.append("output/simulations/{}/rep{}_maf_ldprune.bim".format(model, i))
    beds.append("output/simulations/{}/rep{}_maf_ldprune.bed".format(model, i))


rule coalsim_all:
    """Dummy rule to runs all coalescent simulations
    """
    input:
      fams,
      bims,
      beds


rule run_coalsim:
    """Runs coalescent simulation for a given model
    """
    input:
    params:
        model = "{model}",
        path = "output/simulations/{model}",
        vcf = "output/simulations/{model}/rep{rep}.vcf",
        vcfgz = "output/simulations/{model}/rep{rep}.vcf.gz",
        prune = "output/simulations/{model}/rep{rep}.prune.in",
        bed_prefix_0 = "output/simulations/{model}/rep{rep}_maf",
        bed_prefix_1 = "output/simulations/{model}/rep{rep}_maf_ldprune",
    output:
        bed = "output/simulations/{model}/rep{rep}_maf_ldprune.bed",
        bim = "output/simulations/{model}/rep{rep}_maf_ldprune.bim",
        fam = "output/simulations/{model}/rep{rep}_maf_ldprune.fam"
    run:
        # simulate from model
        species = stdpopsim.get_species("HomSap")
        contig = species.get_contig("chr22", length_multiplier=LENGTH_MULTIPLIER)
        model = species.get_demographic_model(params.model)       
        samples = model.get_samples(N_SAMPLES)
        engine = stdpopsim.get_default_engine()

        # generate tree sequences
        ts = engine.simulate(model, contig, samples)

        # write to vcf
        with open(params.vcf, "w") as vcf_out:
	        ts.write_vcf(vcf_out, 2)
        
        # compress vcf
        shell("bgzip {params.vcf}")

        # filter on maf
        shell("plink --vcf {params.vcfgz} --double-id --maf .05 --out {params.bed_prefix_0} --make-bed")

        # ld prune snps
        shell("plink --bfile {params.bed_prefix_0} --indep-pairwise 200 25 0.4 --out {params.bed_prefix_0}")
        shell("plink --bfile {params.bed_prefix_0} --extract {params.prune} --make-bed --out {params.bed_prefix_1}")

        # remove intermediate files
        shell("rm {params.vcfgz}")
        shell("rm {params.bed_prefix_0}.*")
        shell("rm {params.path}/*.log {params.path}/*.nosex")
