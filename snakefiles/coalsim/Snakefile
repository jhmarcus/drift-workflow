#!python
import glob
import os
import numpy as np
import pandas as pd
import stdpopsim


# global variables
MODELS = ["OutOfAfrica_2T12", "OutOfAfrica_3G09", "AmericanAdmixture_4B11"]
#N_HAP_SAMPLES_PER_POP = 80
N_HAP_SAMPLES_PER_POP = 200
N_REP = 5
N_TARGET_SNPS = 100000

# output files/foldrs to be created
txts = [] 
for model in MODELS:
  for i in range(N_REP):
    txts.append("output/simulations/{}/rep{}.txt".format(model, i))


rule coalsim_all:
    """Dummy rule to runs all coalescent simulations
    """
    input:
      txts


rule run_coalsim:
    """Runs coalescent simulation for a given model
    """
    input:
    output:
        txt = "output/simulations/{model}/rep{rep}.txt",
    params:
        model = "{model}",
    run:
        # print update interval
        n_print = 50
        
        # simulate from model
        species = stdpopsim.get_species("HomSap")
        contig = species.get_contig("chr22", length_multiplier=100000.0/51304566.0)
        model = species.get_demographic_model(params.model)       
        
        # get samples
        if params.model == "OutOfAfrica_3G09":
          samples = model.get_samples(N_HAP_SAMPLES_PER_POP, 
                                      N_HAP_SAMPLES_PER_POP, 
                                      N_HAP_SAMPLES_PER_POP)
        elif params.model == "AmericanAdmixture_4B11": 
          samples = model.get_samples(N_HAP_SAMPLES_PER_POP, 
                                      N_HAP_SAMPLES_PER_POP, 
                                      N_HAP_SAMPLES_PER_POP,
                                      N_HAP_SAMPLES_PER_POP)
        elif params.model == "OutOfAfrica_2T12":
          samples = model.get_samples(N_HAP_SAMPLES_PER_POP, 
                                      N_HAP_SAMPLES_PER_POP)
        else:
          raise ValueError

        # get simulation engine
        engine = stdpopsim.get_default_engine()

        haplotypes = []
        for i in range(N_TARGET_SNPS):
            # generate tree sequences
            ts = engine.simulate(model, contig, samples)

            # extract haps from ts
            H = ts.genotype_matrix()
            p, n = H.shape

            # select a random marker per linked replicate
            if p == 0:
                continue
            else:    
                idx = np.random.choice(np.arange(p), 1)
                h = H[idx, :]

            haplotypes.append(h)
        
            if i % n_print == 0:
                print("Simulating ~SNP {}".format(i))
    
        # stack haplotypes over replicates
        H = np.vstack(haplotypes)

        # convert to genotype matrix: s/o to @aabiddanda
        genotypes = H[:,::2] + H[:,1::2]
        
        # save the matrix to text file
        np.savetxt(output.txt, genotypes)
