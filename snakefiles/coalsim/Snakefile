#!python
import glob
import os
import numpy as np
import pandas as pd
import math
import msprime


rule coalsim_all:
    """Runs all coalescent simulations
    """
    input:
        ["data/datasets/ooa_sim/ooa_sim_maf_ldprune.bed",
         "data/datasets/ooa_sim/ooa_sim_maf_ldprune.bim", 
         "data/datasets/ooa_sim/ooa_sim_maf_ldprune.fam"]


rule run_ooa_sim:
    """Runs out of africa simulation
    """
    input:
    params:
        path = "data/datasets/ooa_sim",
        vcf = "data/datasets/ooa_sim/ooa_sim.vcf",
        vcfgz = "data/datasets/ooa_sim/ooa_sim.vcf.gz",
        prune = "data/datasets/ooa_sim/ooa_sim_maf.prune.in",
        bed_prefix_0 = "data/datasets/ooa_sim/ooa_sim_maf",
        bed_prefix_1 = "data/datasets/ooa_sim/ooa_sim_maf_ldprune",
        n_afr=100,
        n_eur=100,
        n_eas=100,
        mu = 1.2e-8,
        r = 1e-8,
        seqlen = 1e8
    output:
        bed = "data/datasets/ooa_sim/ooa_sim_maf_ldprune.bed",
        bim = "data/datasets/ooa_sim/ooa_sim_maf_ldprune.bim",
        fam = "data/datasets/ooa_sim/ooa_sim_maf_ldprune.fam"
    run:
        # modified from https://msprime.readthedocs.io/en/stable/tutorial.html + Arjuns script

        # First we set out the maximum likelihood values of the various parameters
        # given in Table 1.
        N_A = 7300
        N_B = 2100
        N_AF = 12300
        N_EU0 = 1000
        N_AS0 = 510

        # Times are provided in years, so we convert into generations.
        generation_time = 25
        T_AF = 220e3 / generation_time
        T_B = 140e3 / generation_time
        T_EU_AS = 21.2e3 / generation_time
        
        # We need to work out the starting (diploid) population sizes based on
        # the growth rates provided for these two populations
        r_EU = 0.004
        r_AS = 0.0055
        N_EU = N_EU0 / math.exp(-r_EU * T_EU_AS)
        N_AS = N_AS0 / math.exp(-r_AS * T_EU_AS)
        
        # Migration rates during the various epochs.
        m_AF_B = 25e-5
        m_AF_EU = 3e-5
        m_AF_AS = 1.9e-5
        m_EU_AS = 9.6e-5

        # Population IDs correspond to their indexes in the population
        # configuration array. Therefore, we have 0=YRI, 1=CEU and 2=CHB
        # initially.
        population_configurations = [
            msprime.PopulationConfiguration(
                sample_size=params.n_afr, initial_size=N_AF),
            msprime.PopulationConfiguration(
                sample_size=params.n_eur, initial_size=N_EU, growth_rate=r_EU),
            msprime.PopulationConfiguration(
                sample_size=params.n_eas, initial_size=N_AS, growth_rate=r_AS)
        ]

        migration_matrix = [
            [0, m_AF_EU, m_AF_AS],
            [m_AF_EU, 0, m_EU_AS],
            [m_AF_AS, m_EU_AS, 0],
        ]

        demographic_events = [
            # CEU and CHB merge into B with rate changes at T_EU_AS
            msprime.MassMigration(
                time=T_EU_AS, source=2, destination=1, proportion=1.0),
            msprime.MigrationRateChange(time=T_EU_AS, rate=0),
            msprime.MigrationRateChange(
                time=T_EU_AS, rate=m_AF_B, matrix_index=(0, 1)),
            msprime.MigrationRateChange(
                time=T_EU_AS, rate=m_AF_B, matrix_index=(1, 0)),
            msprime.PopulationParametersChange(
                time=T_EU_AS, initial_size=N_B, growth_rate=0, population_id=1),
            # Population B merges into YRI at T_B
            msprime.MassMigration(
                time=T_B, source=1, destination=0, proportion=1.0),
            # Size changes to N_A at T_AF
            msprime.PopulationParametersChange(
                time=T_AF, initial_size=N_A, population_id=0)
        ]

        # tree seq
        ts = msprime.simulate(length=params.seqlen, recombination_rate=params.r, mutation_rate=params.mu,
                              population_configurations=population_configurations,
                              migration_matrix=migration_matrix,
                              demographic_events=demographic_events)

        # write to vcf
        with open(params.vcf, "w") as vcf_out:
	        ts.write_vcf(vcf_out, 2)
        
        # compress vcf
        shell("bgzip {params.vcf}")

        # filter on maf
        shell("plink --vcf {params.vcfgz} --double-id --maf .05 --out {params.bed_prefix_0} --make-bed")

        # ld prune snps
        shell("plink --bfile {params.bed_prefix_0} --indep-pairwise 200 25 0.4 --out {params.bed_prefix_0}")
        shell("plink --bfile {params.bed_prefix_0} --extract {params.prune} --make-bed --out {params.bed_prefix_1}")

        # remove intermediate files
        shell("rm {params.vcfgz}")
        shell("rm {params.bed_prefix_0}.*")
        shell("rm {params.path}/*.log {params.path}/*.nosex")
