#!python
import glob
import os
from snakemake.utils import R


# setup the output files 
dataset_paths = glob.glob("data/datasets/*")
rds = []
for dataset_path in dataset_paths:
    dataset = os.path.basename(dataset_path)
    bed_lst = glob.glob("{}/*.bed".format(dataset_path))
    if len(bed_lst) > 0:
        bed_path = bed_lst[0]
        prefix = os.path.basename(bed_path).split(".")[0]
        rds.append("output/pca/{}/{}.rds".format(dataset, prefix))


rule pca_all:
    """Runs all the pca rules
    """
    input:
        rds


rule run_pca:
    """Runs pca
    """
    input:
        bed = "data/datasets/{dataset}/{prefix}.bed"
    params:
        bed = "data/datasets/{dataset}/{prefix}"
    output:
        rds = "output/pca/{dataset}/{prefix}.rds"
    benchmark:
        "output/benchmark/pca/{dataset}/{prefix}.txt"
    run:
        R("""
          # read the genotype matrix
          Y = lfa:::read.bed('{params.bed}')

          # number of individuals
          n = ncol(Y)

          # number of SNPs
          p = nrow(Y)
            
          # impute missing values with mean over individuals
          # adpated from https://github.com/StoreyLab/alstructure/blob/master/R/factor.R
          mu_row = apply(Y, 1, function(x) mean(x, na.rm = TRUE))
          for(i in 1:p){{Y[i, which(is.na(Y[i, ]))] = mu_row[i]}}

          # center and scale the rows then
          Z = lfa:::centerscale(Y)
            
          # run truncated svd
          pca_fit = lfa:::trunc.svd(Z, 20)

          # save the rds
          saveRDS(pca_fit, '{output.rds}')
          """)
